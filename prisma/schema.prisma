// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String
  bilboards Billboard[] @relation("StoreToBillboard")

  categories Category[] @relation("StoreToCategory")

  colors Color[] @relation("StoreToColor")

  products  Product[] @relation("StoreToProduct")
  sizes     Size[]    @relation("StoreToSize")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId
  label      String
  imageUrl   String
  categories Category[]
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Color {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store   Store  @relation("StoreToColor", fields: [storeId], references: [id])

  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Size {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store   Store  @relation("StoreToSize", fields: [storeId], references: [id])

  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String   @db.ObjectId
  store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  isFeatured Boolean?
  isArchived Boolean?
  name       String
  price  Int
  categoryId String   @db.ObjectId
  category   Category @relation( "CategoryToProduct", fields: [categoryId], references: [id])

  sizeId String @db.ObjectId
  size   Size   @relation(fields: [sizeId], references: [id])

  colorId String  @db.ObjectId
  color   Color   @relation(fields: [colorId], references: [id])
  images  Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sizeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([storeId])
}

model Image {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([productId])
}
